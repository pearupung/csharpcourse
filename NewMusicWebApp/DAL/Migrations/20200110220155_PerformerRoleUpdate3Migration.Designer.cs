// <auto-generated />
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200110220155_PerformerRoleUpdate3Migration")]
    partial class PerformerRoleUpdate3Migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Dj", b =>
                {
                    b.Property<int>("DjId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("DjId");

                    b.ToTable("Djs");
                });

            modelBuilder.Entity("Domain.DjTrack", b =>
                {
                    b.Property<int>("DjTrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DjId")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("DjTrackId");

                    b.HasIndex("DjId");

                    b.HasIndex("TrackId");

                    b.ToTable("DjTracks");
                });

            modelBuilder.Entity("Domain.Performer", b =>
                {
                    b.Property<int>("PerformerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PerformerId");

                    b.ToTable("Performers");
                });

            modelBuilder.Entity("Domain.PerformerRole", b =>
                {
                    b.Property<int>("PerformerRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PerformerRoleName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PerformerRoleId");

                    b.ToTable("PerformerRoles");
                });

            modelBuilder.Entity("Domain.PerformerTrack", b =>
                {
                    b.Property<int>("PerformerTrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CostPerSecond")
                        .HasColumnType("int");

                    b.Property<int>("PerformerId")
                        .HasColumnType("int");

                    b.Property<string>("PerformerTrackName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("PerformerTrackId");

                    b.HasIndex("PerformerId");

                    b.HasIndex("TrackId");

                    b.ToTable("PerformerTracks");
                });

            modelBuilder.Entity("Domain.PerformerTrackRole", b =>
                {
                    b.Property<int>("PerformerTrackRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PerformerRoleId")
                        .HasColumnType("int");

                    b.Property<int>("PerformerTrackId")
                        .HasColumnType("int");

                    b.HasKey("PerformerTrackRoleId");

                    b.HasIndex("PerformerRoleId");

                    b.HasIndex("PerformerTrackId");

                    b.ToTable("PerformerTrackRoles");
                });

            modelBuilder.Entity("Domain.Track", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TrackLengthInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("TrackName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("TrackId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Domain.DjTrack", b =>
                {
                    b.HasOne("Domain.Dj", "Dj")
                        .WithMany("DjTracks")
                        .HasForeignKey("DjId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Track", "Track")
                        .WithMany("DjTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.PerformerTrack", b =>
                {
                    b.HasOne("Domain.Performer", "Performer")
                        .WithMany("PerformerTracks")
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Track", "Track")
                        .WithMany("PerformerTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.PerformerTrackRole", b =>
                {
                    b.HasOne("Domain.PerformerRole", "PerformerRole")
                        .WithMany("PerformerTrackRoles")
                        .HasForeignKey("PerformerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.PerformerTrack", "PerformerTrack")
                        .WithMany("PerformerTrackRoles")
                        .HasForeignKey("PerformerTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Track", b =>
                {
                    b.HasOne("Domain.Category", "Category")
                        .WithMany("Tracks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
