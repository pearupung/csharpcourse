// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EquipmentHourlyPrice")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("LenderPersonId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId");

                    b.HasIndex("LenderPersonId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("Domain.EventSet", b =>
                {
                    b.Property<int>("EventSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("SetDuration")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SetName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("EventSetId");

                    b.HasIndex("EventId");

                    b.HasIndex("PersonId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("Domain.Festival", b =>
                {
                    b.Property<int>("FestivalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FestivalName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("FestivalId");

                    b.ToTable("Festivals");
                });

            modelBuilder.Entity("Domain.FestivalEvent", b =>
                {
                    b.Property<int>("FestivalEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FestivalId")
                        .HasColumnType("int");

                    b.Property<int>("OrganisedEventId")
                        .HasColumnType("int");

                    b.HasKey("FestivalEventId");

                    b.HasIndex("FestivalId");

                    b.HasIndex("OrganisedEventId");

                    b.ToTable("FestivalEvents");
                });

            modelBuilder.Entity("Domain.OrganisedEvent", b =>
                {
                    b.Property<int>("OrganisedEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CleanUpTime")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PreparationTime")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TicketCount")
                        .HasColumnType("int");

                    b.Property<int>("TicketPrice")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("OrganisedEventId");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Domain.Participant", b =>
                {
                    b.Property<int>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("OrganisedEventId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ParticipateBeginDate")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ParticipateBeginTime")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ParticipateEndDate")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ParticipateEndTime")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("ParticipantId");

                    b.HasIndex("OrganisedEventId");

                    b.HasIndex("ParticipantTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Domain.ParticipantType", b =>
                {
                    b.Property<int>("ParticipantTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FixedSum")
                        .HasColumnType("int");

                    b.Property<bool>("GetsFixedSum")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("GetsHourly")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("HourlyWage")
                        .HasColumnType("int");

                    b.Property<string>("ParticipantTypeName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ParticipantTypeId");

                    b.ToTable("ParticipantTypes");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IdCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VatSubjectNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PersonId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Domain.SetTrack", b =>
                {
                    b.Property<int>("SetTrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActualPlayTimeInSeconds")
                        .HasColumnType("int");

                    b.Property<int?>("EventSetId")
                        .HasColumnType("int");

                    b.Property<int>("PlannedPlayTimeInSeconds")
                        .HasColumnType("int");

                    b.Property<int>("QueueNumber")
                        .HasColumnType("int");

                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("SetTrackId");

                    b.HasIndex("EventSetId");

                    b.HasIndex("TrackId");

                    b.ToTable("SetTracks");
                });

            modelBuilder.Entity("Domain.Track", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LengthInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("TrackId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Domain.TrackAuthor", b =>
                {
                    b.Property<int>("TrackAuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("TrackAuthorTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("TrackAuthorId");

                    b.HasIndex("PersonId");

                    b.HasIndex("TrackAuthorTypeId");

                    b.HasIndex("TrackId");

                    b.ToTable("TrackAuthors");
                });

            modelBuilder.Entity("Domain.TrackAuthorType", b =>
                {
                    b.Property<int>("TrackAuthorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TrackAuthorTypeName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("TrackAuthorTypeId");

                    b.ToTable("TrackAuthorTypes");
                });

            modelBuilder.Entity("Domain.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("HourlyPrice")
                        .HasColumnType("int");

                    b.Property<int>("SimplePrice")
                        .HasColumnType("int");

                    b.Property<string>("VenueAddress")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("VenueId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("Domain.VenueEquipment", b =>
                {
                    b.Property<int>("VenueEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ArrivalAddress")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ArrivalTime")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("OrganisedEventId")
                        .HasColumnType("int");

                    b.Property<string>("ReturnAddress")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReturnTime")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("VenueEquipmentId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("OrganisedEventId");

                    b.ToTable("VenueEquipments");
                });

            modelBuilder.Entity("Domain.Equipment", b =>
                {
                    b.HasOne("Domain.Person", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.EventSet", b =>
                {
                    b.HasOne("Domain.OrganisedEvent", "Event")
                        .WithMany("Sets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Person", "Dj")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.FestivalEvent", b =>
                {
                    b.HasOne("Domain.Festival", "Festival")
                        .WithMany("FestivalEvents")
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.OrganisedEvent", "OrganisedEvent")
                        .WithMany("FestivalEvents")
                        .HasForeignKey("OrganisedEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.OrganisedEvent", b =>
                {
                    b.HasOne("Domain.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Participant", b =>
                {
                    b.HasOne("Domain.OrganisedEvent", null)
                        .WithMany("Participants")
                        .HasForeignKey("OrganisedEventId");

                    b.HasOne("Domain.ParticipantType", "ParticipantType")
                        .WithMany("Participants")
                        .HasForeignKey("ParticipantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Person", "Person")
                        .WithMany("Participants")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.SetTrack", b =>
                {
                    b.HasOne("Domain.EventSet", "EventSet")
                        .WithMany("SetTracks")
                        .HasForeignKey("EventSetId");

                    b.HasOne("Domain.Track", "Track")
                        .WithMany("SetTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.TrackAuthor", b =>
                {
                    b.HasOne("Domain.Person", "Author")
                        .WithMany("TrackAuthors")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TrackAuthorType", "TrackAuthorType")
                        .WithMany("TrackAuthors")
                        .HasForeignKey("TrackAuthorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Track", "Track")
                        .WithMany("TrackAuthors")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.VenueEquipment", b =>
                {
                    b.HasOne("Domain.Equipment", "Equipment")
                        .WithMany("VenueEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.OrganisedEvent", "OrganisedEvent")
                        .WithMany("VenueEquipment")
                        .HasForeignKey("OrganisedEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
